/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(MonAnalyseur)
package modele.javacc;
//import
import java.util.*;
import modele.bdd.Bdd;
import modele.commande.Print;
import modele.karnel.Attribut;
import modele.karnel.Schema;
import modele.karnel._Relation;
import modele.karnel._Schema;
import modele.karnel.state.StateFullRelation;
import modele.karnel.state.full.StateFullInMemoryRelation;
import modele.karnel.state.less.Identite;
import modele.karnel.tuple.Tuple;
import modele.type.IntegerSGBD;
import modele.type.StringSGBD;

public class MonAnalyseur
{
  public static void main(String args []) throws ParseException
  {
    Bdd bd = new Bdd();
    _Schema schema = new Schema(
    new Attribut("C1", IntegerSGBD.TYPE), 
    new Attribut("C2", StringSGBD.TYPE)
    );
    StateFullRelation r = new StateFullInMemoryRelation(bd, "RELATION", schema);
    bd.add(r);
    bd.get("RELATION").add(new Tuple(123, "MORAT"));
    bd.get("RELATION").add(new Tuple(1234, "MASSELIN"));
    bd.get("RELATION").add(new Tuple(12434, "DERVIEUX"));
    new Print(bd.get("RELATION")).execute();
    new Print(new Identite(bd.get("RELATION"))).execute();
    //Debut Parser
    MonAnalyseur parser = new MonAnalyseur(System.in);
    List < String > l = new ArrayList < String > ();
     
      int selectTest;
      String schemaReq;
      int choix;
      String table;
      l.clear();
      table = "";
      selectTest = 0;
      try
      {
        l = parser.REQUETE();
        for (String valeurIt : l)
        {
          //=====================================================================
          // Si Le premier Therme est select
          //=====================================================================
          if (valeurIt.equals("select"))
          {
            selectTest = 1;
          }
          else if (selectTest == 1)
          {
            schemaReq = valeurIt;
            if (schemaReq.equals("*"))
            {
              choix = 1;
              selectTest = 2;
            }
          }

          else if (selectTest == 2)
          {
            selectTest =3;
          }
          
          else if (selectTest == 3)
          {
            
            new Print(new Identite(bd.get(valeurIt))).execute();
          }
          //=====================================================================
          // Si le premier therme est insert
          //=====================================================================
          if (valeurIt.equals("insert"))
          {
            selectTest = 10;
          }
          else if (selectTest == 10)
          {
            table = valeurIt;
            selectTest = 20;
          }
          else if (selectTest == 20)
          {
            bd.get(table).add(new Tuple(valeurIt));
          }
        }	
        System.out.println();
        System.out.println("syntaxe correcte !");
      }
      catch (Exception e)
      {
        e.printStackTrace();
      }
  }
}

PARSER_END(MonAnalyseur)

SKIP :
{
  " "
| "\n"
| "\t"
}

TOKEN [ IGNORE_CASE ] :
{
  < SELECT : "select" >
| < DELETE : "delete" >
| < UPDATE : "update" >
| < INSERT : "insert into" >
| < FROM : "from" >
| < WHERE : "where" >
| < AND : "and" >
| < OR : "or" >
| < GROUP : "group by" >
| < HAVING : "having" >
| < ORDER : "order by" >
| < VALUES : "values" >
}

TOKEN :
{
  < IDF : ([ "a"-"z", "A"-"Z", "*", ",","0"-"9" ])+ >
| < FIN : ";" >
}

List < String > REQUETE() :
{
  List < String > ls;
}
{
  ls = REQUETESELSIMPLE()
  {
    return ls;
  }
| ls = REQUETEINS()
  {
    return ls;
  }
}

List < String > REQUETEINS() :
{
  Token t1;
  Token t2;
  Token t3;
  String str;
}
{
  t1 = < INSERT > t2 = < IDF > t3 = < VALUES > str = INSERTVALUE()
  {
    List < String > s = new ArrayList < String > ();
    s.add(t1.image);
    s.add(t2.image);
    s.add(t3.image);
    s.add(str);
    return s;
  }
}

List < String > REQUETESELSIMPLE() :
{
  Token t1;
  Token t2;
  Token t3;
  Token t4;
}
{
  t1 = < SELECT > t2 = < IDF > t3 = < FROM > t4 = < IDF >
  {
    List < String > s = new ArrayList < String > ();
    s.add(t1.image);
    s.add(t2.image);
    s.add(t3.image);
    s.add(t4.image);
    return s;
  }
}

String INSERTVALUE() :
{
  Token t;
}
{
  "(" t = < IDF > ")"
  {
    return t.image;
  }
}

void SUITEINSERT() :
{}
{
  (
    "," INSERTVALUE()
  )*
}

List < String > SCHEMA() :
{
  Token t;
}
{
  t = < IDF >
  {
    List < String > s = new ArrayList < String > ();
    s.add(t.image);
    return s;
  }
}

void TABLE() :
{}
{
  < IDF >
}
