/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(MonAnalyseur)
package modele.javacc;
//import
import java.util.*;
import modele.bdd.Bdd;
import modele.commande.Print;
import modele.karnel.Attribut;
import modele.karnel.Schema;
import modele.karnel._Relation;
import modele.karnel._Schema;
import modele.karnel.state.StateFullRelation;
import modele.karnel.state.full.StateFullInMemoryRelation;
import modele.karnel.state.less.Identite;
import modele.karnel.tuple.Tuple;
import modele.type.IntegerSGBD;
import modele.type.StringSGBD;
import modele.karnel.state.less.Projection;

public class MonAnalyseur
{
  public static void main(String args []) throws ParseException
  {
    Bdd bd = new Bdd();
    _Schema schema = new Schema(
    new Attribut("C1", IntegerSGBD.TYPE), 
    new Attribut("C2", StringSGBD.TYPE)
    );
    StateFullRelation r = new StateFullInMemoryRelation(bd, "RELATION", schema);
    bd.add(r);
    bd.get("RELATION").add(new Tuple(123, "MORAT"));
    bd.get("RELATION").add(new Tuple(1234, "MASSELIN"));
    bd.get("RELATION").add(new Tuple(12434, "DERVIEUX"));
    new Print(bd.get("RELATION")).execute();
    new Print(new Identite(bd.get("RELATION"))).execute();
    //Debut Parser
    MonAnalyseur parser = new MonAnalyseur(System.in);
    List < String > l = new ArrayList < String > ();
    //Declaration des variables
    int selectTest;
    String schemaReq;
    int choix;
    String table;
    String colonnes;
    //initialisation des variables
    l.clear();
    table = "";
    selectTest = 0;
    colonnes = "";
    try
    {
      l = parser.REQUETE();
      for (String valeurIt : l)
      {
        switch (selectTest)
        {
          //Si c'est la première iteration
          case 0 : 
          // Si le premier mot est select
          if (valeurIt.equals("select"))
          {
            selectTest = 1;
          }
          // Si le premier mot insert
          if (valeurIt.equals("insert into"))
          {
            selectTest = 10;
          }
          break;
          // Le premier therme était select on recupere donc les colonnes demander soit étoile pour une projection totale
          // ou seulement le nom de certaine colonnes pour une projection partielle
          case 1 : 
          schemaReq = valeurIt;
          // Si l'utilisateur à rentrer * il veut une projection totale
          if (schemaReq.equals("*"))
          {
            colonnes = "*";
          }
          // Sinon il souhaite une projection partielle et on le stock dans une variable
          else
          {
            colonnes = valeurIt;
          }
          selectTest = 2;
          break;
          // Le premier thermes était select et donc le troisième est from et on passe au suivant
          case 2 : 
          selectTest = 3;
          break;
          // Le premier thermes était select et on prend le therme après from qui correspond à la table dans laquel on veut chercher ces informations
          case 3 : 
          // Si la table demander était complete alors on utilise la class identite et on lui passe le nom de la table rentrer par l'utilisateur 
          if (colonnes.equals("*"))
          {
            new Print(new Identite(bd.get(valeurIt))).execute();
          }
          // sinon on lui passe la table et les champs qu'il souhaite voire
          else
          {
            _Schema sche = new Schema(new Attribut(colonnes, bd.get(valeurIt).schema().getTypeAttribut(colonnes)));
            new Print(new Projection(bd.get(valeurIt), sche)).execute();
          }
          break;
          // Le premier therme était un insert alors le deuxième est la table où il souhaite inserer
          case 10 : 
          table = valeurIt;
          selectTest = 20;
          // Le premier therme était insert donc le troisième doit être values
          case 20 : 
          selectTest = 30;
          break;
          // Le premier therme était insert et donc on peut récupérer ce que l'utilisateur souhaite entrer dans la table
          case 30 : 
          bd.get(table).add(new Tuple(valeurIt));
          break;
        }
      }	
      System.out.println();
      System.out.println("syntaxe correcte !");
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }
}

PARSER_END(MonAnalyseur)

SKIP :
{
  " "
| "\n"
| "\t"
}

TOKEN [ IGNORE_CASE ] :
{
  < SELECT : "select" >
| < DELETE : "delete" >
| < UPDATE : "update" >
| < INSERT : "insert into" >
| < FROM : "from" >
| < WHERE : "where" >
| < AND : "and" >
| < OR : "or" >
| < GROUP : "group by" >
| < HAVING : "having" >
| < ORDER : "order by" >
| < VALUES : "values" >
}

TOKEN :
{
  < IDF : ([ "a"-"z", "A"-"Z", "*", ",", "0"-"9" ])+ >
| < FIN : ";" >
| < OUVPAR :"(" >
| < FERPAR : ")" >
}

//Permet de regrouper tout les types de requete différent
List < String > REQUETE() :
{
  List < String > ls;
}
{
  ls = REQUETESELSIMPLE()
  {
    return ls;
  }
| ls = REQUETEINS()
  {
    return ls;
  }
  /*| ls = REQUETESELWHERE()
  {
    return ls;
  }*/
}

//Permet d'ajouter UN tuple dans une table
List < String > REQUETEINS() :
{
  Token t1;
  Token t2;
  Token t3;
  String str;
}
{
  t1 = < INSERT > t2 = < IDF > t3 = < VALUES > str = INSERTVALUE()
  {
    List < String > s = new ArrayList < String > ();
    s.add(t1.image);
    s.add(t2.image);
    s.add(t3.image);
    s.add(str);
    return s;
  }
}

//Requete de selection simple a base d'un select et d'un from
List < String > REQUETESELSIMPLE() :
{
  Token t1;
  Token t2;
  Token t3;
  Token t4;
}
{
  t1 = < SELECT > t2 = < IDF > t3 = < FROM > t4 = < IDF >
  {
    List < String > s = new ArrayList < String > ();
    s.add(t1.image);
    s.add(t2.image);
    s.add(t3.image);
    s.add(t4.image);
    return s;
  }
}

//Requete de selection a base d'un select d'un from et d'un where
List < String > REQUETESELWHERE() :
{
  Token t1;
  Token t2;
  Token t3;
  Token t4;
  Token t5;
}
{
  t1 = < SELECT > t2 = < IDF > t3 = < FROM > t4 = < IDF > t5 = < WHERE >
  {
    List < String > s = new ArrayList < String > ();
    s.add(t1.image);
    s.add(t2.image);
    s.add(t3.image);
    s.add(t4.image);
    s.add(t5.image);
    return s;
  }
}

String INSERTVALUE() :
{
  Token t;
}
{
  < OUVPAR > t = < IDF > < FERPAR >
  {
    return t.image;
  }
}

void SUITEINSERT() :
{}
{
  (
    "," INSERTVALUE()
  )*
}
